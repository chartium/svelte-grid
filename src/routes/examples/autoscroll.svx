<style>
.container {
max-width: 300px;
width: 100%;
max-height: 300px;
overflow: scroll;
margin-top: 20px;
}
</style>

<svelte:head>
  <title>Example — Autoscroll</title>
  <meta name="description" content="Svelte-grid — Example — Autoscroll" />
  <meta name="keywords" content="draggable,resizable,grid,layout,responsive,breakpoints,Svelte,svelte,svelte.js,sveltejs,usage,example,examples,samples,basic,showcase,autoscroll" />
  <meta name="author" content="Vahe Araqelyan" />
</svelte:head>

## Autoscroll
<small><a target=_blank href="https://svelte.dev/repl/db448b1bbbf147bb8d63d0272a81b93b?version=latest">REPL</a></small>
<small><a target=_blank  href={`${openSource}/autoscroll.svx`}>SOURCE</a></small>

Simple auto-scrolling that only requires a reference to your container

> Autoscrolling occurs when the cursor is close to the edges of your container. This does not happen when the bottom or top of your widget is close to the edges

<label>
  <input type="checkbox" bind:checked={useWindow} />
  Use document
</label>

```svelte
<!-- You can use a custom container as a scroll target -->
<div bind:this={container}>
  <Grid {...} scroller={container} />
</div>

<script>
let container;
</script>
```

<label>
Sensor value
<input type=number bind:value={sensor} />
</label>

> Set the distance from the cursor to the edge (The default value is 20)

<div class:container={!useWindow} bind:this={container}>
  <Grid bind:items={items} rowHeight={100} let:item let:dataItem {cols} {scroller} {sensor}>
    <div class=demo-widget>{dataItem.id}</div>
  </Grid>
</div>


<script>
import { onMount } from 'svelte'
import Grid from "../../components/svelte-grid/index.svelte";
import gridHelp from "../../components/svelte-grid/utils/helper.js";
import { openSource } from "./github.js";

const id = () => "_" + Math.random().toString(36).substr(2, 9);

let container;
let useWindow = false
let documentContainer;
let scroller;
let sensor = 20;

onMount(() => {
 documentContainer = document.documentElement;
 scroller = container;
})

$: scroller = useWindow ? documentContainer : container;


let items = [
  {
    6: gridHelp.item({
      x: 0,
      y: 0,
      w: 2,
      h: 20,
    }),
    id: id(),
  },

  {
    6: gridHelp.item({
      x: 2,
      y: 0,
      w: 2,
      h: 2,
    }),
    id: id(),
  },
];

const cols = [
  [ 1100, 6 ],
];
</script>
